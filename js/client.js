//@ sourceMappingURL=client.map
// Generated by CoffeeScript 1.6.1

/*
  Здесь реализован весь клиентский JavaScript. Подразумевается, что модель
  подключается заранее.
*/


(function() {

  (function($) {
    return $(document).ready(function() {
      var ChangeWord, Wc, en, funt, me, setPlayerDiv, socket;
      socket = io.connect(document.URL.match(/^http:\/\/[^/]*/));
      /*
      Viewer=(obj)->
        if (obj instanceof Player)
          html = """
                <div id='#{@name}' class='player'>
                  <div class='left' style='background:rgb(#{50},#{255},#{20});display: inline-block;width: 10px;'>#{@ml}</div>
                  <div class="main" style='background:rgb(#{255},#{0},#{0});display: inline-block;width: 70px;'>#{@name}</div>
                  <div class='right' style='background:rgb(#{50},#{255},#{20});display: inline-block;width:20px;'>#{@mr}</div>
                </div>
                """
          return html
        if (obj instanceof Enemy)
          return alert "This is class Enemy"
      */

      ChangeWord = function() {
        var w;
        w = "" + (String.fromCharCode(Math.ceil(65 + Math.random() * 25)));
        while (w === me.ml || w === me.mr || w === me.mu || w === me.md) {
          w = "" + (String.fromCharCode(Math.ceil(65 + Math.random() * 25)));
          console.log("testing continue");
        }
        console.log("lalala");
        return w;
      };
      funt = function() {
        return console.log("пуля летит");
      };
      setPlayerDiv = function(pl) {
        var p;
        p = $('#' + pl.name);
        if (p.length === 0) {
          p = $(document.body).append(pl.html(0));
          p = $('#' + pl.name);
        } else {
          p = p.html(pl.html(1));
        }
        p.css('left', pl.x + 'px');
        return p.css('top', pl.y + 'px');
      };
      Wc = new World();
      console.log("Wc.name=" + Wc.name);
      me = new Player();
      en = new Enemy();
      socket.emit('add user', me);
      socket.on('change name', function(name) {
        return me.name = name;
      });
      socket.on('Shut Up And Take My World', function(Ws) {
        var pl, _i, _len, _ref;
        Wc = new World(Ws);
        _ref = Wc.Players;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          pl = _ref[_i];
          setPlayerDiv(new Player(pl));
        }
        return console.log("Wc.name=" + Wc.name);
      });
      socket.on('user have been added', function(pl) {
        setPlayerDiv(new Player(pl));
        Wc.AddPlayer(pl);
        return console.log("Joined " + Wc.Players[pl.number].name);
      });
      socket.on('user have been changed', function(pl) {
        setPlayerDiv(new Player(pl));
        return Wc.ChangePlayer(pl);
      });
      socket.on('enemy have been added', function(data) {
        return setPlayerDiv(new Enemy(data));
      });
      socket.on('enemy have been changed', function(data) {
        return setPlayerDiv(new Enemy(data));
      });
      return $("body").keydown(function(e) {
        var B, D, _ref;
        if (e.keyCode === 32) {
          B = new Bullet(me);
          setPlayerDiv(B);
          D = setInterval(B.Replace(), 1000);
        }
        if (String.fromCharCode(e.keyCode) === me.ml) {
          me.MoveTo(1);
          me.ml = ChangeWord();
          console.log(me.ml);
        }
        if (String.fromCharCode(e.keyCode) === me.mr) {
          me.MoveTo(3);
          me.mr = ChangeWord();
          console.log("mr=" + me.mr);
        }
        if (String.fromCharCode(e.keyCode) === me.mu) {
          me.MoveTo(2);
          me.mu = ChangeWord();
          console.log(me.mu);
        }
        if (String.fromCharCode(e.keyCode) === me.md) {
          me.MoveTo(4);
          me.md = ChangeWord();
          console.log(me.md);
        }
        if ((65 <= (_ref = e.keyCode) && _ref <= 90)) {
          setPlayerDiv(me);
          return socket.emit('change user', me);
        }
      });
    });
  })(jQuery);

}).call(this);
