//@ sourceMappingURL=model.map
// Generated by CoffeeScript 1.6.1

/*
  Здесь реализована модель проекта. В частности игрок.
*/


(function() {
  var Bullet, Enemy, Player, World;

  World = (function() {
    var Bullets, Enemies;

    Enemies = {};

    Bullets = {};

    function World(obj) {
      switch (typeof obj) {
        case 'undefined':
          this.count = 0;
          this.name = "World" + (Math.ceil(Math.random() * 1000));
          this.Players = [];
          this.bx1 = 0;
          this.bx2 = 1000;
          this.by1 = 0;
          this.by2 = 1000;
          break;
        default:
          this.Players = obj.Players;
          this.count = obj.count;
          this.name = obj.name;
          this.bx1 = obj.bx1;
          this.bx2 = obj.bx2;
          this.by1 = obj.by1;
          this.by2 = obj.by2;
      }
    }

    World.prototype.AddPlayer = function(pl) {
      this.Players[this.count] = pl;
      return this.count++;
    };

    World.prototype.AddEnemy = function(en) {};

    World.prototype.AddBullet = function(bullet) {};

    constructor;

    World.prototype.ChangePlayer = function(pl) {
      if (this.Players[pl.number] != null) {
        return this.Players[pl.number] = pl;
      }
    };

    return World;

  })();

  Player = (function() {

    function Player(obj, x, y) {
      switch (typeof obj) {
        case 'string':
          this.name = obj;
          this.x = x;
          this.y = y;
          this.ml = "" + (String.fromCharCode(Math.ceil(65 + Math.random() * 25)));
          this.mr = "" + (String.fromCharCode(Math.ceil(65 + Math.random() * 25)));
          break;
        case 'object':
          this.name = obj.name;
          this.x = obj.x;
          this.y = obj.y;
          this.ml = obj.ml;
          this.mr = obj.mr;
          break;
        case 'undefined':
          this.number = 0;
          this.name = "Player_";
          this.x = Math.ceil(Math.random() * 500);
          this.y = Math.ceil(Math.random() * 500);
          this.ml = Player.ChangeWord();
          this.mr = Player.ChangeWord();
          this.mu = Player.ChangeWord();
          this.md = Player.ChangeWord();
          break;
        default:
          throw "Wrong player constructor.";
      }
    }

    Player.prototype.html = function(v) {
      if (v === 0) {
        return "<div id='" + this.name + "' class='player'>\n  <div class='top'>" + this.mu + "</div>\n  <div class='middle_line'>\n    <div class='left' style='background:rgb(" + 50 + "," + 255 + "," + 20 + ");display: inline-block;width: 10px;'>" + this.mr + "</div>\n    <div class=\"main\" style='background:rgb(" + 255 + "," + 0 + "," + 0 + ");display: inline-block;width: 70px;'>" + this.name + "</div>\n    <div class='right' style='background:rgb(" + 50 + "," + 255 + "," + 20 + ");display: inline-block;width:10px;'>" + this.mr + "</div>\n  </div>\n  <div class='bottom'>" + this.md + "</div>\n</div>";
      } else {
        return "<div class='top'>" + this.mu + "</div>\n<div class='middle_line'>\n  <div class='left' style='background:rgb(" + 50 + "," + 255 + "," + 20 + ");display: inline-block;width: 10px;'>" + this.ml + "</div>\n  <div class=\"main\" style='background:rgb(" + 255 + "," + 0 + "," + 0 + ");display: inline-block;width: 70px;'>" + this.name + "</div>\n  <div class='right' style='background:rgb(" + 50 + "," + 255 + "," + 20 + ");display: inline-block;width:10px;'>" + this.mr + "</div>\n</div>\n<div class='bottom'>" + this.md + "</div>";
      }
    };

    Player.prototype.MoveTo = function(v) {
      switch (v) {
        case 1:
          this.x -= 60;
          console.log("toLeft " + this.x);
          return this.ml = Player.ChangeWord();
        case 3:
          this.x += 60;
          console.log("toRight " + this.x);
          return this.mr = Player.ChangeWord();
        case 2:
          this.y -= 20;
          console.log("toUp " + this.y);
          return this.mu = Player.ChangeWord();
        case 4:
          this.y += 20;
          console.log("toDown " + this.y);
          return this.md = Player.ChangeWord();
        default:
          return console.log("Fig");
      }
    };

    Player.ChangeWord = function() {
      var w;
      w = "" + (String.fromCharCode(Math.ceil(65 + Math.random() * 25)));
      while (w === Player.ml || w === Player.mr || w === Player.mu || w === Player.md) {
        w = "" + (String.fromCharCode(Math.ceil(65 + Math.random() * 25)));
        console.log("testing continue");
      }
      console.log("lalala");
      return w;
    };

    return Player;

  })();

  Enemy = (function() {

    function Enemy(obj, x, y) {
      var cd;
      switch (typeof obj) {
        case 'string':
          this.name = obj;
          this.x = x;
          this.y = y;
          break;
        case 'object':
          this.name = obj.name;
          this.x = obj.x;
          this.y = obj.y;
          break;
        case 'undefined':
          this.name = "Enemy" + (Math.ceil(Math.random() * 1000));
          this.x = Player.x;
          this.y = Player.y;
          cd = "23";
          break;
        default:
          throw "Wrong enemy constructor.";
      }
    }

    Enemy.prototype.html = function() {
      return "    <div id='" + this.name + "' class='player' style='background: rgb(" + 0 + "," + 208 + "," + 255 + ")'>" + this.name + "       <div id='" + this.name + "' class='player' style='background: rgb(" + 50 + "," + 255 + "," + 20 + ")'>" + this.cd + "</div>    </div>    ";
    };

    return Enemy;

  })();

  Bullet = (function() {

    function Bullet(obj) {
      this.name = "B";
      this.x = obj.x + 45;
      this.y = obj.y - 30;
    }

    Bullet.prototype.Replace = function() {
      return b.y += 10;
    };

    Bullet.prototype.html = function() {
      return "<div id='" + this.name + "' class='bullet' style='background: rgb(" + 255 + "," + 208 + "," + 255 + ")'>" + this.name + "</div>";
    };

    return Bullet;

  })();

  if (typeof module !== "undefined" && module !== null) {
    module.exports = {
      Player: Player,
      Enemy: Enemy,
      World: World,
      Bullet: Bullet
    };
  }

  if (typeof window !== "undefined" && window !== null) {
    window.Player = Player;
  }

  if (typeof window !== "undefined" && window !== null) {
    window.Enemy = Enemy;
  }

  if (typeof window !== "undefined" && window !== null) {
    window.World = World;
  }

  if (typeof window !== "undefined" && window !== null) {
    window.Bullet = Bullet;
  }

}).call(this);
